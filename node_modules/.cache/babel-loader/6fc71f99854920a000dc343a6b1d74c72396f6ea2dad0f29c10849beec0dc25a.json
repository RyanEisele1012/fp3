{"ast":null,"code":"import { VSN, CHANNEL_EVENTS, TRANSPORTS, SOCKET_STATES, DEFAULT_TIMEOUT, WS_CLOSE_NORMAL, DEFAULT_HEADERS, CONNECTION_STATE } from './lib/constants';\nimport Timer from './lib/timer';\nimport Serializer from './lib/serializer';\nimport RealtimeChannel from './RealtimeChannel';\nconst noop = () => {};\nconst NATIVE_WEBSOCKET_AVAILABLE = typeof WebSocket !== 'undefined';\nexport default class RealtimeClient {\n  /**\r\n   * Initializes the Socket.\r\n   *\r\n   * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\r\n   * @param options.transport The Websocket Transport, for example WebSocket.\r\n   * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\r\n   * @param options.params The optional params to pass when connecting.\r\n   * @param options.headers The optional headers to pass when connecting.\r\n   * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\r\n   * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\r\n   * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\r\n   * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\r\n   * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\r\n   */\n  constructor(endPoint, options) {\n    var _a;\n    this.accessToken = null;\n    this.apiKey = null;\n    this.channels = [];\n    this.endPoint = '';\n    this.headers = DEFAULT_HEADERS;\n    this.params = {};\n    this.timeout = DEFAULT_TIMEOUT;\n    this.heartbeatIntervalMs = 30000;\n    this.heartbeatTimer = undefined;\n    this.pendingHeartbeatRef = null;\n    this.ref = 0;\n    this.logger = noop;\n    this.conn = null;\n    this.sendBuffer = [];\n    this.serializer = new Serializer();\n    this.stateChangeCallbacks = {\n      open: [],\n      close: [],\n      error: [],\n      message: []\n    };\n    /**\r\n     * Use either custom fetch, if provided, or default fetch to make HTTP requests\r\n     *\r\n     * @internal\r\n     */\n    this._resolveFetch = customFetch => {\n      let _fetch;\n      if (customFetch) {\n        _fetch = customFetch;\n      } else if (typeof fetch === 'undefined') {\n        _fetch = (...args) => import('@supabase/node-fetch').then(({\n          default: fetch\n        }) => fetch(...args));\n      } else {\n        _fetch = fetch;\n      }\n      return (...args) => _fetch(...args);\n    };\n    this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;\n    if (options === null || options === void 0 ? void 0 : options.transport) {\n      this.transport = options.transport;\n    } else {\n      this.transport = null;\n    }\n    if (options === null || options === void 0 ? void 0 : options.params) this.params = options.params;\n    if (options === null || options === void 0 ? void 0 : options.headers) this.headers = Object.assign(Object.assign({}, this.headers), options.headers);\n    if (options === null || options === void 0 ? void 0 : options.timeout) this.timeout = options.timeout;\n    if (options === null || options === void 0 ? void 0 : options.logger) this.logger = options.logger;\n    if (options === null || options === void 0 ? void 0 : options.heartbeatIntervalMs) this.heartbeatIntervalMs = options.heartbeatIntervalMs;\n    const accessToken = (_a = options === null || options === void 0 ? void 0 : options.params) === null || _a === void 0 ? void 0 : _a.apikey;\n    if (accessToken) {\n      this.accessToken = accessToken;\n      this.apiKey = accessToken;\n    }\n    this.reconnectAfterMs = (options === null || options === void 0 ? void 0 : options.reconnectAfterMs) ? options.reconnectAfterMs : tries => {\n      return [1000, 2000, 5000, 10000][tries - 1] || 10000;\n    };\n    this.encode = (options === null || options === void 0 ? void 0 : options.encode) ? options.encode : (payload, callback) => {\n      return callback(JSON.stringify(payload));\n    };\n    this.decode = (options === null || options === void 0 ? void 0 : options.decode) ? options.decode : this.serializer.decode.bind(this.serializer);\n    this.reconnectTimer = new Timer(async () => {\n      this.disconnect();\n      this.connect();\n    }, this.reconnectAfterMs);\n    this.fetch = this._resolveFetch(options === null || options === void 0 ? void 0 : options.fetch);\n  }\n  /**\r\n   * Connects the socket, unless already connected.\r\n   */\n  connect() {\n    if (this.conn) {\n      return;\n    }\n    if (this.transport) {\n      this.conn = new this.transport(this._endPointURL(), undefined, {\n        headers: this.headers\n      });\n      return;\n    }\n    if (NATIVE_WEBSOCKET_AVAILABLE) {\n      this.conn = new WebSocket(this._endPointURL());\n      this.setupConnection();\n      return;\n    }\n    this.conn = new WSWebSocketDummy(this._endPointURL(), undefined, {\n      close: () => {\n        this.conn = null;\n      }\n    });\n    import('ws').then(({\n      default: WS\n    }) => {\n      this.conn = new WS(this._endPointURL(), undefined, {\n        headers: this.headers\n      });\n      this.setupConnection();\n    });\n  }\n  /**\r\n   * Disconnects the socket.\r\n   *\r\n   * @param code A numeric status code to send on disconnect.\r\n   * @param reason A custom reason for the disconnect.\r\n   */\n  disconnect(code, reason) {\n    if (this.conn) {\n      this.conn.onclose = function () {}; // noop\n      if (code) {\n        this.conn.close(code, reason !== null && reason !== void 0 ? reason : '');\n      } else {\n        this.conn.close();\n      }\n      this.conn = null;\n      // remove open handles\n      this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n      this.reconnectTimer.reset();\n    }\n  }\n  /**\r\n   * Returns all created channels\r\n   */\n  getChannels() {\n    return this.channels;\n  }\n  /**\r\n   * Unsubscribes and removes a single channel\r\n   * @param channel A RealtimeChannel instance\r\n   */\n  async removeChannel(channel) {\n    const status = await channel.unsubscribe();\n    if (this.channels.length === 0) {\n      this.disconnect();\n    }\n    return status;\n  }\n  /**\r\n   * Unsubscribes and removes all channels\r\n   */\n  async removeAllChannels() {\n    const values_1 = await Promise.all(this.channels.map(channel => channel.unsubscribe()));\n    this.disconnect();\n    return values_1;\n  }\n  /**\r\n   * Logs the message.\r\n   *\r\n   * For customized logging, `this.logger` can be overridden.\r\n   */\n  log(kind, msg, data) {\n    this.logger(kind, msg, data);\n  }\n  /**\r\n   * Returns the current state of the socket.\r\n   */\n  connectionState() {\n    switch (this.conn && this.conn.readyState) {\n      case SOCKET_STATES.connecting:\n        return CONNECTION_STATE.Connecting;\n      case SOCKET_STATES.open:\n        return CONNECTION_STATE.Open;\n      case SOCKET_STATES.closing:\n        return CONNECTION_STATE.Closing;\n      default:\n        return CONNECTION_STATE.Closed;\n    }\n  }\n  /**\r\n   * Returns `true` is the connection is open.\r\n   */\n  isConnected() {\n    return this.connectionState() === CONNECTION_STATE.Open;\n  }\n  channel(topic, params = {\n    config: {}\n  }) {\n    const chan = new RealtimeChannel(`realtime:${topic}`, params, this);\n    this.channels.push(chan);\n    return chan;\n  }\n  /**\r\n   * Push out a message if the socket is connected.\r\n   *\r\n   * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\r\n   */\n  push(data) {\n    const {\n      topic,\n      event,\n      payload,\n      ref\n    } = data;\n    const callback = () => {\n      this.encode(data, result => {\n        var _a;\n        (_a = this.conn) === null || _a === void 0 ? void 0 : _a.send(result);\n      });\n    };\n    this.log('push', `${topic} ${event} (${ref})`, payload);\n    if (this.isConnected()) {\n      callback();\n    } else {\n      this.sendBuffer.push(callback);\n    }\n  }\n  /**\r\n   * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\r\n   *\r\n   * @param token A JWT string.\r\n   */\n  setAuth(token) {\n    this.accessToken = token;\n    this.channels.forEach(channel => {\n      token && channel.updateJoinPayload({\n        access_token: token\n      });\n      if (channel.joinedOnce && channel._isJoined()) {\n        channel._push(CHANNEL_EVENTS.access_token, {\n          access_token: token\n        });\n      }\n    });\n  }\n  /**\r\n   * Return the next message ref, accounting for overflows\r\n   *\r\n   * @internal\r\n   */\n  _makeRef() {\n    let newRef = this.ref + 1;\n    if (newRef === this.ref) {\n      this.ref = 0;\n    } else {\n      this.ref = newRef;\n    }\n    return this.ref.toString();\n  }\n  /**\r\n   * Unsubscribe from channels with the specified topic.\r\n   *\r\n   * @internal\r\n   */\n  _leaveOpenTopic(topic) {\n    let dupChannel = this.channels.find(c => c.topic === topic && (c._isJoined() || c._isJoining()));\n    if (dupChannel) {\n      this.log('transport', `leaving duplicate topic \"${topic}\"`);\n      dupChannel.unsubscribe();\n    }\n  }\n  /**\r\n   * Removes a subscription from the socket.\r\n   *\r\n   * @param channel An open subscription.\r\n   *\r\n   * @internal\r\n   */\n  _remove(channel) {\n    this.channels = this.channels.filter(c => c._joinRef() !== channel._joinRef());\n  }\n  /**\r\n   * Sets up connection handlers.\r\n   *\r\n   * @internal\r\n   */\n  setupConnection() {\n    if (this.conn) {\n      this.conn.binaryType = 'arraybuffer';\n      this.conn.onopen = () => this._onConnOpen();\n      this.conn.onerror = error => this._onConnError(error);\n      this.conn.onmessage = event => this._onConnMessage(event);\n      this.conn.onclose = event => this._onConnClose(event);\n    }\n  }\n  /**\r\n   * Returns the URL of the websocket.\r\n   *\r\n   * @internal\r\n   */\n  _endPointURL() {\n    return this._appendParams(this.endPoint, Object.assign({}, this.params, {\n      vsn: VSN\n    }));\n  }\n  /** @internal */\n  _onConnMessage(rawMessage) {\n    this.decode(rawMessage.data, msg => {\n      let {\n        topic,\n        event,\n        payload,\n        ref\n      } = msg;\n      if (ref && ref === this.pendingHeartbeatRef || event === (payload === null || payload === void 0 ? void 0 : payload.type)) {\n        this.pendingHeartbeatRef = null;\n      }\n      this.log('receive', `${payload.status || ''} ${topic} ${event} ${ref && '(' + ref + ')' || ''}`, payload);\n      this.channels.filter(channel => channel._isMember(topic)).forEach(channel => channel._trigger(event, payload, ref));\n      this.stateChangeCallbacks.message.forEach(callback => callback(msg));\n    });\n  }\n  /** @internal */\n  _onConnOpen() {\n    this.log('transport', `connected to ${this._endPointURL()}`);\n    this._flushSendBuffer();\n    this.reconnectTimer.reset();\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n    this.heartbeatTimer = setInterval(() => this._sendHeartbeat(), this.heartbeatIntervalMs);\n    this.stateChangeCallbacks.open.forEach(callback => callback());\n  }\n  /** @internal */\n  _onConnClose(event) {\n    this.log('transport', 'close', event);\n    this._triggerChanError();\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n    this.reconnectTimer.scheduleTimeout();\n    this.stateChangeCallbacks.close.forEach(callback => callback(event));\n  }\n  /** @internal */\n  _onConnError(error) {\n    this.log('transport', error.message);\n    this._triggerChanError();\n    this.stateChangeCallbacks.error.forEach(callback => callback(error));\n  }\n  /** @internal */\n  _triggerChanError() {\n    this.channels.forEach(channel => channel._trigger(CHANNEL_EVENTS.error));\n  }\n  /** @internal */\n  _appendParams(url, params) {\n    if (Object.keys(params).length === 0) {\n      return url;\n    }\n    const prefix = url.match(/\\?/) ? '&' : '?';\n    const query = new URLSearchParams(params);\n    return `${url}${prefix}${query}`;\n  }\n  /** @internal */\n  _flushSendBuffer() {\n    if (this.isConnected() && this.sendBuffer.length > 0) {\n      this.sendBuffer.forEach(callback => callback());\n      this.sendBuffer = [];\n    }\n  }\n  /** @internal */\n  _sendHeartbeat() {\n    var _a;\n    if (!this.isConnected()) {\n      return;\n    }\n    if (this.pendingHeartbeatRef) {\n      this.pendingHeartbeatRef = null;\n      this.log('transport', 'heartbeat timeout. Attempting to re-establish connection');\n      (_a = this.conn) === null || _a === void 0 ? void 0 : _a.close(WS_CLOSE_NORMAL, 'hearbeat timeout');\n      return;\n    }\n    this.pendingHeartbeatRef = this._makeRef();\n    this.push({\n      topic: 'phoenix',\n      event: 'heartbeat',\n      payload: {},\n      ref: this.pendingHeartbeatRef\n    });\n    this.setAuth(this.accessToken);\n  }\n}\nclass WSWebSocketDummy {\n  constructor(address, _protocols, options) {\n    this.binaryType = 'arraybuffer';\n    this.onclose = () => {};\n    this.onerror = () => {};\n    this.onmessage = () => {};\n    this.onopen = () => {};\n    this.readyState = SOCKET_STATES.connecting;\n    this.send = () => {};\n    this.url = null;\n    this.url = address;\n    this.close = options.close;\n  }\n}","map":{"version":3,"mappings":"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","names":["VSN","CHANNEL_EVENTS","TRANSPORTS","SOCKET_STATES","DEFAULT_TIMEOUT","WS_CLOSE_NORMAL","DEFAULT_HEADERS","CONNECTION_STATE","Timer","Serializer","RealtimeChannel","noop","NATIVE_WEBSOCKET_AVAILABLE","WebSocket","RealtimeClient","constructor","endPoint","options","undefined","open","close","error","message","customFetch","_fetch","fetch","args","then","default","websocket","transport","params","headers","timeout","logger","heartbeatIntervalMs","accessToken","apikey","apiKey","reconnectAfterMs","tries","encode","payload","callback","JSON","stringify","decode","serializer","bind","reconnectTimer","disconnect","connect","_resolveFetch","conn","_endPointURL","setupConnection","WSWebSocketDummy","WS","code","reason","onclose","heartbeatTimer","clearInterval","reset","getChannels","channels","removeChannel","channel","status","unsubscribe","length","removeAllChannels","values_1","Promise","all","map","log","kind","msg","data","connectionState","readyState","connecting","Connecting","Open","closing","Closing","Closed","isConnected","topic","config","chan","push","event","ref","result","send","sendBuffer","setAuth","token","forEach","updateJoinPayload","access_token","joinedOnce","_isJoined","_push","_makeRef","newRef","toString","_leaveOpenTopic","dupChannel","find","c","_isJoining","_remove","filter","_joinRef","binaryType","onopen","_onConnOpen","onerror","_onConnError","onmessage","_onConnMessage","_onConnClose","_appendParams","Object","assign","vsn","rawMessage","pendingHeartbeatRef","type","_isMember","_trigger","stateChangeCallbacks","_flushSendBuffer","setInterval","_sendHeartbeat","_triggerChanError","scheduleTimeout","url","keys","prefix","match","query","URLSearchParams","address","_protocols"],"sources":["C:\\Users\\Ryan\\Documents\\COP4808\\hw7\\final-project-RyanEisele1012\\node_modules\\@supabase\\realtime-js\\src\\RealtimeClient.ts"],"sourcesContent":["import {\r\n  VSN,\r\n  CHANNEL_EVENTS,\r\n  TRANSPORTS,\r\n  SOCKET_STATES,\r\n  DEFAULT_TIMEOUT,\r\n  WS_CLOSE_NORMAL,\r\n  DEFAULT_HEADERS,\r\n  CONNECTION_STATE,\r\n} from './lib/constants'\r\nimport Timer from './lib/timer'\r\nimport Serializer from './lib/serializer'\r\nimport RealtimeChannel from './RealtimeChannel'\r\nimport type { RealtimeChannelOptions } from './RealtimeChannel'\r\n\r\nimport type { WebSocket as WSWebSocket } from 'ws'\r\n\r\ntype Fetch = typeof fetch\r\n\r\nexport type RealtimeClientOptions = {\r\n  transport?: WebSocketLikeConstructor\r\n  timeout?: number\r\n  heartbeatIntervalMs?: number\r\n  logger?: Function\r\n  encode?: Function\r\n  decode?: Function\r\n  reconnectAfterMs?: Function\r\n  headers?: { [key: string]: string }\r\n  params?: { [key: string]: any }\r\n  log_level?: 'info' | 'debug' | 'warn' | 'error'\r\n  fetch?: Fetch\r\n}\r\n\r\nexport type RealtimeMessage = {\r\n  topic: string\r\n  event: string\r\n  payload: any\r\n  ref: string\r\n  join_ref?: string\r\n}\r\n\r\nexport type RealtimeRemoveChannelResponse = 'ok' | 'timed out' | 'error'\r\n\r\nconst noop = () => {}\r\n\r\ninterface WebSocketLikeConstructor {\r\n  new (\r\n    address: string | URL,\r\n    _ignored?: any,\r\n    options?: { headers: Object | undefined }\r\n  ): WebSocketLike\r\n}\r\n\r\ntype WebSocketLike = WebSocket | WSWebSocket | WSWebSocketDummy\r\n\r\ninterface WebSocketLikeError {\r\n  error: any\r\n  message: string\r\n  type: string\r\n}\r\n\r\nconst NATIVE_WEBSOCKET_AVAILABLE = typeof WebSocket !== 'undefined'\r\n\r\nexport default class RealtimeClient {\r\n  accessToken: string | null = null\r\n  apiKey: string | null = null\r\n  channels: RealtimeChannel[] = []\r\n  endPoint: string = ''\r\n  headers?: { [key: string]: string } = DEFAULT_HEADERS\r\n  params?: { [key: string]: string } = {}\r\n  timeout: number = DEFAULT_TIMEOUT\r\n  transport: WebSocketLikeConstructor | null\r\n  heartbeatIntervalMs: number = 30000\r\n  heartbeatTimer: ReturnType<typeof setInterval> | undefined = undefined\r\n  pendingHeartbeatRef: string | null = null\r\n  ref: number = 0\r\n  reconnectTimer: Timer\r\n  logger: Function = noop\r\n  encode: Function\r\n  decode: Function\r\n  reconnectAfterMs: Function\r\n  conn: WebSocketLike | null = null\r\n  sendBuffer: Function[] = []\r\n  serializer: Serializer = new Serializer()\r\n  stateChangeCallbacks: {\r\n    open: Function[]\r\n    close: Function[]\r\n    error: Function[]\r\n    message: Function[]\r\n  } = {\r\n    open: [],\r\n    close: [],\r\n    error: [],\r\n    message: [],\r\n  }\r\n  fetch: Fetch\r\n\r\n  /**\r\n   * Initializes the Socket.\r\n   *\r\n   * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\r\n   * @param options.transport The Websocket Transport, for example WebSocket.\r\n   * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\r\n   * @param options.params The optional params to pass when connecting.\r\n   * @param options.headers The optional headers to pass when connecting.\r\n   * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\r\n   * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\r\n   * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\r\n   * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\r\n   * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\r\n   */\r\n  constructor(endPoint: string, options?: RealtimeClientOptions) {\r\n    this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`\r\n\r\n    if (options?.transport) {\r\n      this.transport = options.transport\r\n    } else {\r\n      this.transport = null\r\n    }\r\n    if (options?.params) this.params = options.params\r\n    if (options?.headers) this.headers = { ...this.headers, ...options.headers }\r\n    if (options?.timeout) this.timeout = options.timeout\r\n    if (options?.logger) this.logger = options.logger\r\n    if (options?.heartbeatIntervalMs)\r\n      this.heartbeatIntervalMs = options.heartbeatIntervalMs\r\n\r\n    const accessToken = options?.params?.apikey\r\n    if (accessToken) {\r\n      this.accessToken = accessToken\r\n      this.apiKey = accessToken\r\n    }\r\n\r\n    this.reconnectAfterMs = options?.reconnectAfterMs\r\n      ? options.reconnectAfterMs\r\n      : (tries: number) => {\r\n          return [1000, 2000, 5000, 10000][tries - 1] || 10000\r\n        }\r\n    this.encode = options?.encode\r\n      ? options.encode\r\n      : (payload: JSON, callback: Function) => {\r\n          return callback(JSON.stringify(payload))\r\n        }\r\n    this.decode = options?.decode\r\n      ? options.decode\r\n      : this.serializer.decode.bind(this.serializer)\r\n    this.reconnectTimer = new Timer(async () => {\r\n      this.disconnect()\r\n      this.connect()\r\n    }, this.reconnectAfterMs)\r\n\r\n    this.fetch = this._resolveFetch(options?.fetch)\r\n  }\r\n\r\n  /**\r\n   * Connects the socket, unless already connected.\r\n   */\r\n  connect(): void {\r\n    if (this.conn) {\r\n      return\r\n    }\r\n\r\n    if (this.transport) {\r\n      this.conn = new this.transport(this._endPointURL(), undefined, {\r\n        headers: this.headers,\r\n      })\r\n      return\r\n    }\r\n\r\n    if (NATIVE_WEBSOCKET_AVAILABLE) {\r\n      this.conn = new WebSocket(this._endPointURL())\r\n      this.setupConnection()\r\n      return\r\n    }\r\n\r\n    this.conn = new WSWebSocketDummy(this._endPointURL(), undefined, {\r\n      close: () => {\r\n        this.conn = null\r\n      },\r\n    })\r\n\r\n    import('ws').then(({ default: WS }) => {\r\n      this.conn = new WS(this._endPointURL(), undefined, {\r\n        headers: this.headers,\r\n      })\r\n      this.setupConnection()\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Disconnects the socket.\r\n   *\r\n   * @param code A numeric status code to send on disconnect.\r\n   * @param reason A custom reason for the disconnect.\r\n   */\r\n  disconnect(code?: number, reason?: string): void {\r\n    if (this.conn) {\r\n      this.conn.onclose = function () {} // noop\r\n      if (code) {\r\n        this.conn.close(code, reason ?? '')\r\n      } else {\r\n        this.conn.close()\r\n      }\r\n      this.conn = null\r\n      // remove open handles\r\n      this.heartbeatTimer && clearInterval(this.heartbeatTimer)\r\n      this.reconnectTimer.reset()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns all created channels\r\n   */\r\n  getChannels(): RealtimeChannel[] {\r\n    return this.channels\r\n  }\r\n\r\n  /**\r\n   * Unsubscribes and removes a single channel\r\n   * @param channel A RealtimeChannel instance\r\n   */\r\n  async removeChannel(\r\n    channel: RealtimeChannel\r\n  ): Promise<RealtimeRemoveChannelResponse> {\r\n    const status = await channel.unsubscribe()\r\n    if (this.channels.length === 0) {\r\n      this.disconnect()\r\n    }\r\n    return status\r\n  }\r\n\r\n  /**\r\n   * Unsubscribes and removes all channels\r\n   */\r\n  async removeAllChannels(): Promise<RealtimeRemoveChannelResponse[]> {\r\n    const values_1 = await Promise.all(\r\n      this.channels.map((channel) => channel.unsubscribe())\r\n    )\r\n    this.disconnect()\r\n    return values_1\r\n  }\r\n\r\n  /**\r\n   * Logs the message.\r\n   *\r\n   * For customized logging, `this.logger` can be overridden.\r\n   */\r\n  log(kind: string, msg: string, data?: any) {\r\n    this.logger(kind, msg, data)\r\n  }\r\n\r\n  /**\r\n   * Returns the current state of the socket.\r\n   */\r\n  connectionState(): CONNECTION_STATE {\r\n    switch (this.conn && this.conn.readyState) {\r\n      case SOCKET_STATES.connecting:\r\n        return CONNECTION_STATE.Connecting\r\n      case SOCKET_STATES.open:\r\n        return CONNECTION_STATE.Open\r\n      case SOCKET_STATES.closing:\r\n        return CONNECTION_STATE.Closing\r\n      default:\r\n        return CONNECTION_STATE.Closed\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns `true` is the connection is open.\r\n   */\r\n  isConnected(): boolean {\r\n    return this.connectionState() === CONNECTION_STATE.Open\r\n  }\r\n\r\n  channel(\r\n    topic: string,\r\n    params: RealtimeChannelOptions = { config: {} }\r\n  ): RealtimeChannel {\r\n    const chan = new RealtimeChannel(`realtime:${topic}`, params, this)\r\n    this.channels.push(chan)\r\n    return chan\r\n  }\r\n\r\n  /**\r\n   * Push out a message if the socket is connected.\r\n   *\r\n   * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\r\n   */\r\n  push(data: RealtimeMessage): void {\r\n    const { topic, event, payload, ref } = data\r\n    const callback = () => {\r\n      this.encode(data, (result: any) => {\r\n        this.conn?.send(result)\r\n      })\r\n    }\r\n    this.log('push', `${topic} ${event} (${ref})`, payload)\r\n    if (this.isConnected()) {\r\n      callback()\r\n    } else {\r\n      this.sendBuffer.push(callback)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\r\n   *\r\n   * @param token A JWT string.\r\n   */\r\n  setAuth(token: string | null): void {\r\n    this.accessToken = token\r\n\r\n    this.channels.forEach((channel) => {\r\n      token && channel.updateJoinPayload({ access_token: token })\r\n\r\n      if (channel.joinedOnce && channel._isJoined()) {\r\n        channel._push(CHANNEL_EVENTS.access_token, { access_token: token })\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Use either custom fetch, if provided, or default fetch to make HTTP requests\r\n   *\r\n   * @internal\r\n   */\r\n  _resolveFetch = (customFetch?: Fetch): Fetch => {\r\n    let _fetch: Fetch\r\n    if (customFetch) {\r\n      _fetch = customFetch\r\n    } else if (typeof fetch === 'undefined') {\r\n      _fetch = (...args) =>\r\n        import('@supabase/node-fetch' as any).then(({ default: fetch }) =>\r\n          fetch(...args)\r\n        )\r\n    } else {\r\n      _fetch = fetch\r\n    }\r\n    return (...args) => _fetch(...args)\r\n  }\r\n\r\n  /**\r\n   * Return the next message ref, accounting for overflows\r\n   *\r\n   * @internal\r\n   */\r\n  _makeRef(): string {\r\n    let newRef = this.ref + 1\r\n    if (newRef === this.ref) {\r\n      this.ref = 0\r\n    } else {\r\n      this.ref = newRef\r\n    }\r\n\r\n    return this.ref.toString()\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe from channels with the specified topic.\r\n   *\r\n   * @internal\r\n   */\r\n  _leaveOpenTopic(topic: string): void {\r\n    let dupChannel = this.channels.find(\r\n      (c) => c.topic === topic && (c._isJoined() || c._isJoining())\r\n    )\r\n    if (dupChannel) {\r\n      this.log('transport', `leaving duplicate topic \"${topic}\"`)\r\n      dupChannel.unsubscribe()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes a subscription from the socket.\r\n   *\r\n   * @param channel An open subscription.\r\n   *\r\n   * @internal\r\n   */\r\n  _remove(channel: RealtimeChannel) {\r\n    this.channels = this.channels.filter(\r\n      (c: RealtimeChannel) => c._joinRef() !== channel._joinRef()\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Sets up connection handlers.\r\n   *\r\n   * @internal\r\n   */\r\n  private setupConnection(): void {\r\n    if (this.conn) {\r\n      this.conn.binaryType = 'arraybuffer'\r\n      this.conn.onopen = () => this._onConnOpen()\r\n      this.conn.onerror = (error: WebSocketLikeError) =>\r\n        this._onConnError(error as WebSocketLikeError)\r\n      this.conn.onmessage = (event: any) => this._onConnMessage(event)\r\n      this.conn.onclose = (event: any) => this._onConnClose(event)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the URL of the websocket.\r\n   *\r\n   * @internal\r\n   */\r\n  private _endPointURL(): string {\r\n    return this._appendParams(\r\n      this.endPoint,\r\n      Object.assign({}, this.params, { vsn: VSN })\r\n    )\r\n  }\r\n\r\n  /** @internal */\r\n  private _onConnMessage(rawMessage: { data: any }) {\r\n    this.decode(rawMessage.data, (msg: RealtimeMessage) => {\r\n      let { topic, event, payload, ref } = msg\r\n\r\n      if (\r\n        (ref && ref === this.pendingHeartbeatRef) ||\r\n        event === payload?.type\r\n      ) {\r\n        this.pendingHeartbeatRef = null\r\n      }\r\n\r\n      this.log(\r\n        'receive',\r\n        `${payload.status || ''} ${topic} ${event} ${\r\n          (ref && '(' + ref + ')') || ''\r\n        }`,\r\n        payload\r\n      )\r\n      this.channels\r\n        .filter((channel: RealtimeChannel) => channel._isMember(topic))\r\n        .forEach((channel: RealtimeChannel) =>\r\n          channel._trigger(event, payload, ref)\r\n        )\r\n      this.stateChangeCallbacks.message.forEach((callback) => callback(msg))\r\n    })\r\n  }\r\n\r\n  /** @internal */\r\n  private _onConnOpen() {\r\n    this.log('transport', `connected to ${this._endPointURL()}`)\r\n    this._flushSendBuffer()\r\n    this.reconnectTimer.reset()\r\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer)\r\n    this.heartbeatTimer = setInterval(\r\n      () => this._sendHeartbeat(),\r\n      this.heartbeatIntervalMs\r\n    )\r\n    this.stateChangeCallbacks.open.forEach((callback) => callback())!\r\n  }\r\n\r\n  /** @internal */\r\n  private _onConnClose(event: any) {\r\n    this.log('transport', 'close', event)\r\n    this._triggerChanError()\r\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer)\r\n    this.reconnectTimer.scheduleTimeout()\r\n    this.stateChangeCallbacks.close.forEach((callback) => callback(event))\r\n  }\r\n\r\n  /** @internal */\r\n  private _onConnError(error: WebSocketLikeError) {\r\n    this.log('transport', error.message)\r\n    this._triggerChanError()\r\n    this.stateChangeCallbacks.error.forEach((callback) => callback(error))\r\n  }\r\n\r\n  /** @internal */\r\n  private _triggerChanError() {\r\n    this.channels.forEach((channel: RealtimeChannel) =>\r\n      channel._trigger(CHANNEL_EVENTS.error)\r\n    )\r\n  }\r\n\r\n  /** @internal */\r\n  private _appendParams(\r\n    url: string,\r\n    params: { [key: string]: string }\r\n  ): string {\r\n    if (Object.keys(params).length === 0) {\r\n      return url\r\n    }\r\n    const prefix = url.match(/\\?/) ? '&' : '?'\r\n    const query = new URLSearchParams(params)\r\n\r\n    return `${url}${prefix}${query}`\r\n  }\r\n\r\n  /** @internal */\r\n  private _flushSendBuffer() {\r\n    if (this.isConnected() && this.sendBuffer.length > 0) {\r\n      this.sendBuffer.forEach((callback) => callback())\r\n      this.sendBuffer = []\r\n    }\r\n  }\r\n  /** @internal */\r\n  private _sendHeartbeat() {\r\n    if (!this.isConnected()) {\r\n      return\r\n    }\r\n    if (this.pendingHeartbeatRef) {\r\n      this.pendingHeartbeatRef = null\r\n      this.log(\r\n        'transport',\r\n        'heartbeat timeout. Attempting to re-establish connection'\r\n      )\r\n      this.conn?.close(WS_CLOSE_NORMAL, 'hearbeat timeout')\r\n      return\r\n    }\r\n    this.pendingHeartbeatRef = this._makeRef()\r\n    this.push({\r\n      topic: 'phoenix',\r\n      event: 'heartbeat',\r\n      payload: {},\r\n      ref: this.pendingHeartbeatRef,\r\n    })\r\n    this.setAuth(this.accessToken)\r\n  }\r\n}\r\n\r\nclass WSWebSocketDummy {\r\n  binaryType: string = 'arraybuffer'\r\n  close: Function\r\n  onclose: Function = () => {}\r\n  onerror: Function = () => {}\r\n  onmessage: Function = () => {}\r\n  onopen: Function = () => {}\r\n  readyState: number = SOCKET_STATES.connecting\r\n  send: Function = () => {}\r\n  url: string | URL | null = null\r\n\r\n  constructor(\r\n    address: string,\r\n    _protocols: undefined,\r\n    options: { close: Function }\r\n  ) {\r\n    this.url = address\r\n    this.close = options.close\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}