{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ryan\\\\Documents\\\\COP4808\\\\hw7\\\\final-project-RyanEisele1012\\\\src\\\\pages\\\\CreatePostForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './CreatePostForm.css';\nimport supabase from '../client'; // Import the Supabase client\nimport bcrypt from 'bcryptjs'; // Import bcrypt to hash the password\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreatePostForm = ({\n  userId,\n  username\n}) => {\n  _s();\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [imageUrl, setImageUrl] = useState('');\n  const [password, setPassword] = useState(''); // State for password\n  const [repostOf, setRepostOf] = useState(''); // State for referenced post ID\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    // Hash the password before sending it to the database\n    const salt = bcrypt.genSaltSync(10);\n    const hashedPassword = bcrypt.hashSync(password, salt);\n    try {\n      const newPost = {\n        title,\n        content,\n        imageUrl,\n        username,\n        // Use passed username\n        userId,\n        // Use passed userId\n        created_at: new Date().toISOString(),\n        upvotes: 0,\n        password_hash: hashedPassword,\n        repost_of: repostOf // Include the ID of the referenced post\n      };\n      const {\n        data,\n        error\n      } = await supabase.from('Posts').insert([newPost]);\n      if (error) {\n        throw error;\n      }\n\n      // Clear the form fields after submission\n      setTitle('');\n      setContent('');\n      setImageUrl('');\n      setPassword('');\n      setRepostOf('');\n    } catch (error) {\n      console.error('Error inserting new post:', error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Create New Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Title:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: true,\n          of: \"text\",\n          value: title,\n          onChange: e => setTitle(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Content:\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: content,\n          onChange: e => setContent(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Image URL:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: true,\n          of: \"text\",\n          value: imageUrl,\n          onChange: e => setImageUrl(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Username:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: true,\n          of: \"text\",\n          value: username,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Password (for editing this post):\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: true,\n          of: \"password\",\n          value: password,\n          onChange: e => setPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Repost of (Post ID):\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: true,\n          of: \"text\",\n          value: repostOf,\n          onChange: e => setRepostOf(e.target.value),\n          placeholder: \"Enter the ID of the post you're reposting\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n_s(CreatePostForm, \"5SaH1TooJ5waknKi07VjCq7TqVw=\");\n_c = CreatePostForm;\nexport default CreatePostForm;\nvar _c;\n$RefreshReg$(_c, \"CreatePostForm\");","map":{"version":3,"names":["React","useState","supabase","bcrypt","jsxDEV","_jsxDEV","CreatePostForm","userId","username","_s","title","setTitle","content","setContent","imageUrl","setImageUrl","password","setPassword","repostOf","setRepostOf","handleSubmit","e","preventDefault","salt","genSaltSync","hashedPassword","hashSync","newPost","created_at","Date","toISOString","upvotes","password_hash","repost_of","data","error","from","insert","console","message","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","of","value","onChange","target","readOnly","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/Ryan/Documents/COP4808/hw7/final-project-RyanEisele1012/src/pages/CreatePostForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './CreatePostForm.css';\r\nimport supabase from '../client'; // Import the Supabase client\r\nimport bcrypt from 'bcryptjs'; // Import bcrypt to hash the password\r\n\r\nconst CreatePostForm = ({ userId, username }) => {\r\n    const [title, setTitle] = useState('');\r\n    const [content, setContent] = useState('');\r\n    const [imageUrl, setImageUrl] = useState('');\r\n    const [password, setPassword] = useState(''); // State for password\r\n    const [repostOf, setRepostOf] = useState(''); // State for referenced post ID\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        // Hash the password before sending it to the database\r\n        const salt = bcrypt.genSaltSync(10);\r\n        const hashedPassword = bcrypt.hashSync(password, salt);\r\n\r\n        try {\r\n            const newPost = {\r\n                title,\r\n                content,\r\n                imageUrl,\r\n                username, // Use passed username\r\n                userId,   // Use passed userId\r\n                created_at: new Date().toISOString(),\r\n                upvotes: 0,\r\n                password_hash: hashedPassword,\r\n                repost_of: repostOf // Include the ID of the referenced post\r\n            };\r\n\r\n            const { data, error } = await supabase.from('Posts').insert([newPost]);\r\n            if (error) {\r\n                throw error;\r\n            }\r\n\r\n            // Clear the form fields after submission\r\n            setTitle('');\r\n            setContent('');\r\n            setImageUrl('');\r\n            setPassword('');\r\n            setRepostOf('');\r\n        } catch (error) {\r\n            console.error('Error inserting new post:', error.message);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Create New Post</h2>\r\n            <form onSubmit={handleSubmit}>\r\n                <label>\r\n                    Title:\r\n                    <input type of=\"text\" value={title} onChange={(e) => setTitle(e.target.value)} />\r\n                </label>\r\n                <label>\r\n                    Content:\r\n                    <textarea value={content} onChange={(e) => setContent(e.target.value)} />\r\n                </label>\r\n                <label>\r\n                    Image URL:\r\n                    <input type of=\"text\" value={imageUrl} onChange={(e) => setImageUrl(e.target.value)} />\r\n                </label>\r\n                <label>\r\n                    Username:\r\n                    <input type of=\"text\" value={username} readOnly />\r\n                </label>\r\n                <label>\r\n                    Password (for editing this post):\r\n                    <input type of=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} />\r\n                </label>\r\n                <label>\r\n                    Repost of (Post ID):\r\n                    <input\r\n                        type of=\"text\"\r\n                        value={repostOf}\r\n                        onChange={(e) => setRepostOf(e.target.value)}\r\n                        placeholder=\"Enter the ID of the post you're reposting\"\r\n                    />\r\n                </label>\r\n                <button type=\"submit\">Submit</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CreatePostForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}