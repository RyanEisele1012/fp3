{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ryegu\\\\Documents\\\\COP4808\\\\src\\\\pages\\\\PostDetails.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './PostDetails.css'; // Import the CSS file\nimport supabase from '../client'; // Assuming you have a Supabase client instance set up\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostDetails = ({\n  post\n}) => {\n  _s();\n  // Function to format the created_at date in a more readable format\n  const formatDate = dateString => {\n    const date = new Date(dateString);\n    return date.toLocaleString();\n  };\n  const [comments, setComments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [newComment, setNewComment] = useState('');\n  useEffect(() => {\n    if (post) {\n      // Fetch comments data from Supabase when the component mounts\n      const fetchComments = async () => {\n        try {\n          const {\n            data,\n            error\n          } = await supabase.from('Comments').select('*').eq('postId', post.id); // Assuming postId is the column name in Comments table\n          if (error) {\n            throw error;\n          }\n          setComments(data);\n          setLoading(false);\n        } catch (error) {\n          console.error('Error fetching comments:', error.message);\n        }\n      };\n      fetchComments();\n    }\n  }, [post]); // Update comments when post object changes\n\n  const handleSubmitComment = async () => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('Posts').insert([{\n        postId: post.id,\n        comment: newComment,\n        username: 'Anonymous'\n      }]); // Assuming the username is hard-coded here\n      if (error) {\n        throw error;\n      }\n      setComments([...comments, ...data]);\n      setNewComment('');\n    } catch (error) {\n      console.error('Error adding comment:', error.message);\n    }\n  };\n  if (!post) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 16\n    }, this); // or any other appropriate loading state\n  }\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading comments...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 16\n    }, this); // Display loading state while fetching comments\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Post Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Title: \", post.title]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Content: \", post.content]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"User Name: \", post.username]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Upvotes: \", post.upvotes]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), post.imageUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: post.imageUrl,\n      alt: \"Post Image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 31\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Created At: \", formatDate(post.created_at)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: comments.map(comment => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"User: \", comment.username]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Comment: \", comment.comment]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }, this)]\n      }, comment.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: newComment,\n      onChange: e => setNewComment(e.target.value),\n      placeholder: \"Add a comment...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmitComment,\n      children: \"Submit Comment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n_s(PostDetails, \"RQatY2UJ8IpY9n7E3l1DEbfi6DE=\");\n_c = PostDetails;\nexport default PostDetails;\nvar _c;\n$RefreshReg$(_c, \"PostDetails\");","map":{"version":3,"names":["React","useState","useEffect","supabase","jsxDEV","_jsxDEV","PostDetails","post","_s","formatDate","dateString","date","Date","toLocaleString","comments","setComments","loading","setLoading","newComment","setNewComment","fetchComments","data","error","from","select","eq","id","console","message","handleSubmitComment","insert","postId","comment","username","children","fileName","_jsxFileName","lineNumber","columnNumber","title","content","upvotes","imageUrl","src","alt","created_at","map","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/ryegu/Documents/COP4808/src/pages/PostDetails.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './PostDetails.css'; // Import the CSS file\r\nimport supabase from '../client'; // Assuming you have a Supabase client instance set up\r\n\r\nconst PostDetails = ({ post }) => {\r\n    // Function to format the created_at date in a more readable format\r\n    const formatDate = (dateString) => {\r\n        const date = new Date(dateString);\r\n        return date.toLocaleString();\r\n    };\r\n\r\n    const [comments, setComments] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [newComment, setNewComment] = useState('');\r\n\r\n    useEffect(() => {\r\n        if (post) {\r\n            // Fetch comments data from Supabase when the component mounts\r\n            const fetchComments = async () => {\r\n                try {\r\n                    const { data, error } = await supabase\r\n                        .from('Comments')\r\n                        .select('*')\r\n                        .eq('postId', post.id); // Assuming postId is the column name in Comments table\r\n                    if (error) {\r\n                        throw error;\r\n                    }\r\n                    setComments(data);\r\n                    setLoading(false);\r\n                } catch (error) {\r\n                    console.error('Error fetching comments:', error.message);\r\n                }\r\n            };\r\n\r\n            fetchComments();\r\n        }\r\n    }, [post]); // Update comments when post object changes\r\n\r\n    const handleSubmitComment = async () => {\r\n        try {\r\n            const { data, error } = await supabase\r\n                .from('Posts')\r\n                .insert([{ postId: post.id, comment: newComment, username: 'Anonymous' }]); // Assuming the username is hard-coded here\r\n            if (error) {\r\n                throw error;\r\n            }\r\n            setComments([...comments, ...data]);\r\n            setNewComment('');\r\n        } catch (error) {\r\n            console.error('Error adding comment:', error.message);\r\n        }\r\n    };\r\n\r\n    if (!post) {\r\n        return <div>Loading...</div>; // or any other appropriate loading state\r\n    }\r\n\r\n    if (loading) {\r\n        return <div>Loading comments...</div>; // Display loading state while fetching comments\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>Post Details</h2>\r\n            <p>Title: {post.title}</p>\r\n            <p>Content: {post.content}</p>\r\n            <p>User Name: {post.username}</p>\r\n            <p>Upvotes: {post.upvotes}</p>\r\n            {post.imageUrl && <img src={post.imageUrl} alt=\"Post Image\" />}\r\n            <p>Created At: {formatDate(post.created_at)}</p>\r\n\r\n            <h3>Comments</h3>\r\n            <ul>\r\n                {comments.map((comment) => (\r\n                    <li key={comment.id}>\r\n                        <p>User: {comment.username}</p>\r\n                        <p>Comment: {comment.comment}</p>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n\r\n            <textarea\r\n                value={newComment}\r\n                onChange={(e) => setNewComment(e.target.value)}\r\n                placeholder=\"Add a comment...\"\r\n            ></textarea>\r\n            <button onClick={handleSubmitComment}>Submit Comment</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PostDetails;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}