{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ryegu\\\\Documents\\\\COP4808\\\\src\\\\pages\\\\PostDetails.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './PostDetails.css'; // Import the CSS file\nimport supabase from '../client'; // Assuming you have a Supabase client instance set up\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostDetails = ({\n  match\n}) => {\n  _s();\n  const [post, setPost] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Fetch post data based on the ID from the route parameters\n    const fetchPost = async () => {\n      try {\n        // Fetch post data from the server using Supabase\n        const {\n          data,\n          error\n        } = await supabase.from('posts').select('*').eq('id', match.params.id).single();\n        if (error) {\n          throw new Error(error.message);\n        }\n        setPost(data);\n      } catch (error) {\n        console.error('Error fetching post:', error.message);\n        setError('Error fetching post. Please try again later.');\n      }\n    };\n    fetchPost();\n  }, [match.params.id]);\n  useEffect(() => {\n    // Fetch comments data from the post object\n    const fetchComments = async () => {\n      try {\n        // Extract comments from the post object, providing a default empty array if post.comments is falsy\n        const postComments = post ? post.comments || [] : [];\n        setComments(postComments);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching comments:', error.message);\n        setError('Error fetching comments. Please try again later.');\n        setLoading(false);\n      }\n    };\n    if (post) {\n      fetchComments();\n    }\n  }, [post]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"post-details\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: post.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: post.imageUrl,\n      alt: \"Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: comments.map((comment, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"User: \", comment.username]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Content: \", comment.content]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n_s(PostDetails, \"sAxspYnz51pxPeGzRakLa2ZRHK4=\");\n_c = PostDetails;\nexport default PostDetails;\nvar _c;\n$RefreshReg$(_c, \"PostDetails\");","map":{"version":3,"names":["React","useState","useEffect","supabase","jsxDEV","_jsxDEV","PostDetails","match","_s","post","setPost","comments","setComments","loading","setLoading","error","setError","fetchPost","data","from","select","eq","params","id","single","Error","message","console","fetchComments","postComments","children","fileName","_jsxFileName","lineNumber","columnNumber","className","title","content","src","imageUrl","alt","map","comment","index","username","_c","$RefreshReg$"],"sources":["C:/Users/ryegu/Documents/COP4808/src/pages/PostDetails.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './PostDetails.css'; // Import the CSS file\r\nimport supabase from '../client'; // Assuming you have a Supabase client instance set up\r\n\r\nconst PostDetails = ({ match }) => {\r\n    const [post, setPost] = useState(null);\r\n    const [comments, setComments] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        // Fetch post data based on the ID from the route parameters\r\n        const fetchPost = async () => {\r\n            try {\r\n                // Fetch post data from the server using Supabase\r\n                const { data, error } = await supabase\r\n                    .from('posts')\r\n                    .select('*')\r\n                    .eq('id', match.params.id)\r\n                    .single();\r\n\r\n                if (error) {\r\n                    throw new Error(error.message);\r\n                }\r\n\r\n                setPost(data);\r\n            } catch (error) {\r\n                console.error('Error fetching post:', error.message);\r\n                setError('Error fetching post. Please try again later.');\r\n            }\r\n        };\r\n\r\n        fetchPost();\r\n    }, [match.params.id]);\r\n\r\n    useEffect(() => {\r\n        // Fetch comments data from the post object\r\n        const fetchComments = async () => {\r\n            try {\r\n                // Extract comments from the post object, providing a default empty array if post.comments is falsy\r\n                const postComments = post ? post.comments || [] : [];\r\n                setComments(postComments);\r\n                setLoading(false);\r\n            } catch (error) {\r\n                console.error('Error fetching comments:', error.message);\r\n                setError('Error fetching comments. Please try again later.');\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        if (post) {\r\n            fetchComments();\r\n        }\r\n    }, [post]);\r\n\r\n    if (loading) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    if (error) {\r\n        return <div>Error: {error}</div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"post-details\">\r\n            <h2>{post.title}</h2>\r\n            <p>{post.content}</p>\r\n            <img src={post.imageUrl} alt=\"Post\" />\r\n            <h3>Comments</h3>\r\n            <ul>\r\n                {comments.map((comment, index) => (\r\n                    <li key={index}>\r\n                        <p>User: {comment.username}</p>\r\n                        <p>Content: {comment.content}</p>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PostDetails;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}