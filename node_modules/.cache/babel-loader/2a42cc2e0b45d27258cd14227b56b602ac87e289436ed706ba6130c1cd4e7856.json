{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ryan\\\\Documents\\\\COP4808\\\\hw7\\\\final-project-RyanEisele1012\\\\src\\\\pages\\\\CreatePostForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './CreatePostForm.css'; // Ensure this CSS import is correct\n\nimport supabase from '../client'; // Ensure this is the correct path to your Supabase client\nimport bcrypt from 'bcryptjs'; // Correct import of bcryptjs\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreatePostForm = ({\n  userId,\n  username\n}) => {\n  _s();\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [imageUrl, setImageUrl] = useState('');\n  const [password, setPassword] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [message, setMessage] = useState('');\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!title || !content || !password) {\n      setMessage('Please fill in all required fields.');\n      return;\n    }\n    setIsLoading(true);\n\n    // Hash the password before sending it to the database\n    const salt = bcrypt.genSaltSync(10);\n    const hashedPassword = bcrypt.hashSync(password, salt);\n    try {\n      const newPost = {\n        title,\n        content,\n        imageUrl,\n        username,\n        // Use the passed username\n        userId,\n        // Use the passed userId\n        created_at: new Date().toISOString(),\n        upvotes: 0,\n        password_hash: hashedPassword\n      };\n      const {\n        error\n      } = await supabase.from('Posts').insert([newPost]);\n      if (error) {\n        throw error;\n      }\n      setMessage('Post created successfully!');\n      setTitle('');\n      setContent('');\n      setImageUrl('');\n      setPassword('');\n    } catch (error) {\n      console.error('Error inserting new post:', error.message);\n      setMessage('Failed to create post.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-container\",\n    children: [\"  // Assigning the form-container class here\", /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Create New Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Title:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: title,\n          onChange: e => setTitle(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Content:\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: content,\n          onChange: e => setContent(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Image URL:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: imageUrl,\n          onChange: e => setImageUrl(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Username:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: username,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Password (for editing this post):\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          value: password,\n          onChange: e => setPassword(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: isLoading,\n        children: isLoading ? 'Submitting...' : 'Submit'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n_s(CreatePostForm, \"kwfXpY4Qq5tZpXqKb3ipdlVkbmc=\");\n_c = CreatePostForm;\nexport default CreatePostForm;\nvar _c;\n$RefreshReg$(_c, \"CreatePostForm\");","map":{"version":3,"names":["React","useState","supabase","bcrypt","jsxDEV","_jsxDEV","CreatePostForm","userId","username","_s","title","setTitle","content","setContent","imageUrl","setImageUrl","password","setPassword","isLoading","setIsLoading","message","setMessage","handleSubmit","e","preventDefault","salt","genSaltSync","hashedPassword","hashSync","newPost","created_at","Date","toISOString","upvotes","password_hash","error","from","insert","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","required","readOnly","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Ryan/Documents/COP4808/hw7/final-project-RyanEisele1012/src/pages/CreatePostForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './CreatePostForm.css';  // Ensure this CSS import is correct\r\n\r\nimport supabase from '../client';  // Ensure this is the correct path to your Supabase client\r\nimport bcrypt from 'bcryptjs';  // Correct import of bcryptjs\r\n\r\nconst CreatePostForm = ({ userId, username }) => {\r\n    const [title, setTitle] = useState('');\r\n    const [content, setContent] = useState('');\r\n    const [imageUrl, setImageUrl] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [message, setMessage] = useState('');\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if (!title || !content || !password) {\r\n            setMessage('Please fill in all required fields.');\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n\r\n        // Hash the password before sending it to the database\r\n        const salt = bcrypt.genSaltSync(10);\r\n        const hashedPassword = bcrypt.hashSync(password, salt);\r\n\r\n        try {\r\n            const newPost = {\r\n                title,\r\n                content,\r\n                imageUrl,\r\n                username,  // Use the passed username\r\n                userId,    // Use the passed userId\r\n                created_at: new Date().toISOString(),\r\n                upvotes: 0,\r\n                password_hash: hashedPassword,\r\n            };\r\n\r\n            const { error } = await supabase.from('Posts').insert([newPost]);\r\n            if (error) {\r\n                throw error;\r\n            }\r\n\r\n            setMessage('Post created successfully!');\r\n            setTitle('');\r\n            setContent('');\r\n            setImageUrl('');\r\n            setPassword('');\r\n        } catch (error) {\r\n            console.error('Error inserting new post:', error.message);\r\n            setMessage('Failed to create post.');\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"form-container\">  // Assigning the form-container class here\r\n            <h2>Create New Post</h2>\r\n            {message && <p>{message}</p>}\r\n            <form onSubmit={handleSubmit}>\r\n                <label>\r\n                    Title:\r\n                    <input type=\"text\" value={title} onChange={(e) => setTitle(e.target.value)} required />\r\n                </label>\r\n                <label>\r\n                    Content:\r\n                    <textarea value={content} onChange={(e) => setContent(e.target.value)} required />\r\n                </label>\r\n                <label>\r\n                    Image URL:\r\n                    <input type=\"text\" value={imageUrl} onChange={(e) => setImageUrl(e.target.value)} />\r\n                </label>\r\n                <label>\r\n                    Username:\r\n                    <input type=\"text\" value={username} readOnly />\r\n                </label>\r\n                <label>\r\n                    Password (for editing this post):\r\n                    <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} required />\r\n                </label>\r\n                <button type=\"submit\" disabled={isLoading}>{isLoading ? 'Submitting...' : 'Submit'}</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CreatePostForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}